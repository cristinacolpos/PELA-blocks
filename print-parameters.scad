/*
Parametric PELA Print Tuning Parameters

Published at https://PELAblocks.org

By Paul Houghton
Twitter: @mobile_rat
Email: paulirotta@gmail.com
Blog: https://medium.com/@paulhoughton

Creative Commons Attribution-ShareAlike 4.0 International License
    https://creativecommons.org/licenses/by-sa/4.0/legalcode

Open source design, Powered By Futurice. Come work with the best.
    https://www.futurice.com/

Imported automatically into other design files when you include parameters:
    include <style.scad>
 

INSTRUCTIONS
============
1. Set 'flexible_material' and 'large_nozzle' below according to your printer.

2. Open 'PELA_calibration.scad' to generate and print the calibration .STL (In OpenSCAD press F6, then 'export').

3. Test fit the (a) top knobs, (b) bottom sockets, (c) technic holes on the side. These 3 numbers are your 'calibration'. Most slicer settings will not change the calibration for a given material, but use common sense and re-calibrate if needed.

4. Enter those numbers in this file.

5. Print a couple of 4x4 blocks with these adjusted parameters

6. Confirm your calibration fit with real PELA and between two printed blocks. All models will now adjust to this settings..


SUGGESTIONS
===========
- Don't waste time- use LEGO and LEGO technic to assemble what you need with a minimum of printed parts. Print the part yourself when you need something special (shape, function, material..).

- Make sure 'flexible_material' and 'large_nozzle' are set before you print the calibration block. These affect the size of flextures. All other numbers in this file are then set based on preference for a good fit of the calibration block to LEGO and other PELA pieces.

- Layer height is not important to PELA except for readable text on the sides of block

- Print PELA upright, or at up to 45 degrees tilt if needed. Avoid autogenerated supports inside the PELA block unless they are dissolvable.

- Printing fast is generally not a problem. PELA parts do need good inter-layer adhesion, so consider reducing the fan speed if this is a problem.

- Turn down the bed heater on low temperature materials like PLA to avoid "elephant foot" expansion of the bottom edges. Turn on 'brim, outside only' if you need more adhesion.

- Most printing materials are slippery. For this reason leave the top knobs at their default "taller than LEGO" setting to better grip. The downside is you can't push tall PELA knobs into a thin LEGO panel. You can adjust this in PELA-parmaeters.scad or in other cases disable knobs and focus on technic connections.

- Choose more flexible materials that are "tough" rather than stiff. TPU95 and Nylon are ideal and virtually indistructable. Brittle materials will not have as good a fit and may chip or crack. If you prefer PLA, you should try different brands- they vary considerably. Polymaker and Ultimaker PLA flex nicely.

- Smaller 0.4mm nozzles give better results. If 'large_nozzle' (>= 0.5mm) is true, the models will adjust the bottom socket geometry to make some of the inner structures thicker. If this is set wrong, then thin walls with a large nozzle may be eliminated by your slicer.

- See 'SLICER.md' for more tips and settings that have worked for us on specific materials.
*/



// [name, flexible_material, top_tweak, bottom_tweak, axle_hole_tweak];
name_index = 0; // The "name" field is kept short for printing on calibration blocks
flex_index = 1;
top_tweak_index = 2;
bottom_tweak_index = 3;
axle_hole_tweak_index = 4;

// Please update the numbers below based on calibration tests on your printer and slicer 
// These reference numbers are tested as a good starting point on Taz 6, Ultimaker 2+, Ultimaker 3 and Mass Portal ED printers
// Tests were sliced with Simplify 3D, Cura and Lulzbot Cura
// If you add new materials below, you need to do a global search and replace to update the customizer material list hints. (Yeah, we know.. Don't shoot the messenger)

pla = 0; // Polymaker Polylite
pla_m = ["PLA", false, -0.08, 0.04, 0.06];

abs = 1; // Polymaker ABS
abs_m = ["ABS", false, -0.06, -0.02, 0.06];

pet = 2; // Innoflil3D rPET
pet_m = ["PET", false, 0.04, 0.10, 0.04];

bio_silk = 3; // Biofila Silk
bio_silk_m = ["Silk", false, 0.0, 0.0, -0.04];

pro1 = 4; // Innofil3D Pro1
pro1_m = ["Pro1", false, -0.06, 0.08, 0.04];

ngen = 5; // NGEN
ngen_m = ["NGEN", false, -0.03, 0.08, 0.07];

ngen_flex = 6; // NGEN Flex
ngen_flex_m = ["NGEN-F", false, 0.02, 0.02, 0.0];

nylon = 7; // Taulman Bridge Nylon
nylon_m = ["Nylon", true, -0.02, 0.15, 0.06];

tpu95 = 8; // Polymaker TPU95 and Ultimaker TPU95
tpu95_m = ["TPU95", true, -0.06, -0.02, 0.06];

tpu85 = 9; // Ninjaflex and Innoflex TPU85
tpu85_m = ["TPU85", true, 0.04, -0.02, 0.04];

materials = [pla_m, abs_m, pet_m, bio_silk_m, pro1_m, ngen_m, ngen_flex_m, nylon_m, tpu95_m, tpu85_m];

// Printing material
material = 0; // [0:PLA, 1:ABS, 2:PET, 3:Biofila Silk, 4:Pro1, 5:NGEN, 6:NGEN FLEX, 7:Bridge Nylon, 8:TPU95, 9:TPU85/NinjaFlex]

// private function - get a named property from the materials data structure
function material_property(material, property) = materials[material][property];

// Return the short name string from the material
function material_name(material) = materials[material][name_index];

// Return true if this material is flexible
function flexible_material(material) = materials[material][name_index];

// Return top tweak from the material
function material_top_tweak(material) = material_property(material, top_tweak_index);

// Return top tweak="tt" if provided for calibration, otherwise use the material value
function override_top_tweak(material, tt) = (tt == undef) ? material_bottom_tweak(material) : tt;

// Return the bottom tweak from the material
function material_bottom_tweak(material) = material_property(material, bottom_tweak_index);

// Return bottom tweak="bt" if provided for calibration, otherwise use the material value
function override_bottom_tweak(material, bt) = (bt == undef) ? material_bottom_tweak(material) : bt;

// Return the axle hole tweak from the material
function material_axle_hole_tweak(material) = material_property(material, axle_hole_tweak_index);

// Return axle hole tweak="at" if provided for calibration, otherwise use the material
function override_axle_hole_tweak(material, at) = (at == undef) ? material_axle_hole_tweak(material) : at;

// Private function, axle hole radius
function axle_hol_rad(at) = 2.45 + at;

// Return the axle hole radius based on the material
function material_axle_hole_radius(material) = axle_hol_rad(material_axle_hole_tweak(material));

// Return axle hole radius based on the axle hole tweak (at) if provided, otherwise based on the material
function override_axle_hole_radius(material, at) = axle_hol_rad(override_axle_hole_tweak(material, at));

// Private function, knob radius
function knb_rad(tt) = 2.45 + 0.12 + tt;

// Return knob radius based on the material
function material_knob_radius(material) = knb_rad(material_top_tweak(material));

// Return knob radius based on top tweak (tt) if provided, otherwise based on the material
function override_knob_radius(material, tt) = knb_rad(override_top_tweak(material, tt));
